(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  Empty: 0,
  White: 1,
  Black: 2
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CellToken = require('../constants/CellToken');

var _CellToken2 = _interopRequireDefault(_CellToken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReversiEvalMachine = {
  /**
   * 指定した手番の人の得点を計算する
   * 得点: 自分の色のコマの数
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @param {CellToken} 手番の人を示すコマ
   * @return {Number} 得点
   */

  getScoreFor: function getScoreFor(cells, token) {
    var flattenCells = Array.prototype.concat.apply([], cells); // flatten
    return flattenCells.filter(function (cell) {
      return cell === token;
    }).length;
  },

  /**
   * 白なら黒、黒なら白のコマを返す
   *
   * @param {CellToken} token コマ
   * @return {CellToken} 逆のコマ
   */
  reversedToken: function reversedToken(token) {
    return token !== _CellToken2.default.Black ? _CellToken2.default.Black : _CellToken2.default.White;
  },

  /**
   * 指定したマスにコマを置いたら反転されるマスの一覧を取得する
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @param {Number} x 左から数えてマスの位置
   * @param {Number} y 上から数えてマスの位置
   * @param {CellToken} token コマ
   * @return {Array<Object>} マスの位置を {x, y} で表した配列
   */
  effectedCells: function effectedCells(cells, x, y, token) {
    var reversed = ReversiEvalMachine.reversedToken(token);

    function effectedLine(dx, dy) {
      var tx = x + dx;
      var ty = y + dy;

      var line = [];
      // 隣接したマスが連続して逆のコマなら追加
      while (cells[ty] && cells[ty][tx] === reversed) {
        line.push({ x: tx, y: ty });
        var _ref = [tx + dx, ty + dy];
        tx = _ref[0];
        ty = _ref[1];
      }
      // 挟めていなければ追加しない
      if (!(cells[ty] && cells[ty][tx] === token)) {
        line = [];
      }

      return line;
    }

    var effectedCells = [];
    effectedCells = effectedCells.concat(effectedLine(-1, -1));
    effectedCells = effectedCells.concat(effectedLine(-1, 0));
    effectedCells = effectedCells.concat(effectedLine(-1, 1));
    effectedCells = effectedCells.concat(effectedLine(0, -1));
    effectedCells = effectedCells.concat(effectedLine(0, 1));
    effectedCells = effectedCells.concat(effectedLine(1, -1));
    effectedCells = effectedCells.concat(effectedLine(1, 0));
    effectedCells = effectedCells.concat(effectedLine(1, 1));
    return effectedCells;
  },

  /**
   * 指定したマスにコマを置いた場合の次の盤面を返す
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @param {Number} x 左から数えてマスの位置
   * @param {Number} y 上から数えてマスの位置
   * @param {CellToken} token 置くコマ
   * @return {Array<Array<Number>>} 次の盤面を示す２次元配列
   */
  getNextCellsAfterPuttingInto: function getNextCellsAfterPuttingInto(cells, x, y, token) {
    var nextCells = JSON.parse(JSON.stringify(cells));
    if (!ReversiEvalMachine.canPutInto(cells, x, y, token)) {
      // 指定されたマスに置けない場合は、盤面は変わらない
      return nextCells;
    }

    nextCells[y][x] = token;
    var effected = ReversiEvalMachine.effectedCells(cells, x, y, token);
    for (var i = 0; i < effected.length; i++) {
      var cell = effected[i];
      nextCells[cell.y][cell.x] = token;
    }
    return nextCells;
  },

  /**
   * 指定したマスにコマを置けるかどうか判定する
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @param {Number} x 左から数えてマスの位置
   * @param {Number} y 上から数えてマスの位置
   * @param {CellToken} token 置けるかどうか判定するコマ
   * @return {Boolean} 置ける場合は true / 置けない場合は false
   */
  canPutInto: function canPutInto(cells, x, y, token) {
    return cells[y][x] === _CellToken2.default.Empty && ReversiEvalMachine.effectedCells(cells, x, y, token).length > 0;
  },

  /**
   * 指定した手番の人が次に置けるマスが一つでも存在するかどうか
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @param {CellToken} token 次の手番の人の色を示すコマ
   * @return {Boolean} 存在するなら true / 存在しないなら false
   */
  hasPuttableCell: function hasPuttableCell(cells, token) {
    for (var y = 0; y < cells.length; y++) {
      for (var x = 0; x < cells[y].length; x++) {
        if (ReversiEvalMachine.canPutInto(cells, x, y, token)) {
          return true;
        }
      }
    }
    return false;
  },

  /**
   * 残り空きマス数
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @return {Number} 空きマス数
   */
  getNumOfEmpty: function getNumOfEmpty(cells) {
    var count = 0;
    for (var y = 0; y < cells.length; y++) {
      for (var x = 0; x < cells[y].length; x++) {
        if (cells[y][x] === _CellToken2.default.Empty) {
          count += 1;
        }
      }
    }
    return count;
  },

  /**
   * 空きマスが一つでもあるか
   *
   * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
   * @return {Boolean} 空きマスがあれば true / なければ false
   */
  hasEmptyCell: function hasEmptyCell(cells) {
    for (var y = 0; y < cells.length; y++) {
      for (var x = 0; x < cells[y].length; x++) {
        if (cells[y][x] === _CellToken2.default.Empty) {
          return true;
        }
      }
    }
    return false;
  }
};

exports.default = ReversiEvalMachine;

},{"../constants/CellToken":1}],3:[function(require,module,exports){
'use strict';

var _ReversiEvalMachine = require('./ReversiEvalMachine');

var _ReversiEvalMachine2 = _interopRequireDefault(_ReversiEvalMachine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var weight = [[120, -20, 20, 5, 5, 20, -20, 120], [-20, -40, -5, -5, -5, -5, -40, -20], [20, -5, 15, 3, 3, 15, -5, 20], [5, -5, 3, 3, 3, 3, -5, 5], [5, -5, 3, 3, 3, 3, -5, 5], [20, -5, 15, 3, 3, 15, -5, 20], [-20, -40, -5, -5, -5, -5, -40, -20], [120, -20, 20, 5, 5, 20, -20, 120]];

self.onmessage = function (e) {
  var _e$data = e.data;
  var cells = _e$data.cells;
  var token = _e$data.token;
  var depth = _e$data.depth;

  var action = minMax(cells, token, depth).action;
  self.postMessage(action);
};

/**
 * 盤面の得点評価関数
 *
 * @param {Array<Array<Number>>} cells 盤面を示す２次元配列
 * @param {CellToken} 得点を評価したいコマの色
 * @return {Number} 得点
 */
function evalScore(estimatedCells, token) {
  // 与えられた盤面に空きマスがなければ、重み付け関係なしにコマ数だけの評価をする
  if (!_ReversiEvalMachine2.default.hasEmptyCell(estimatedCells)) {
    // flatten
    var flattenCells = Array.prototype.concat.apply([], estimatedCells);
    var numOfToken = flattenCells.filter(function (cell) {
      return cell === token;
    }).length;
    return numOfToken * 10000; // 以下の評価と比較された場合、以下の評価を無視するために十分大きくする
  }

  var score = 0;
  var reversed = _ReversiEvalMachine2.default.reversedToken(token);
  for (var y = 0; y < estimatedCells.length; y++) {
    for (var x = 0; x < estimatedCells[y].length; x++) {
      if (estimatedCells[y][x] === token) {
        score += weight[y][x];
      } else if (estimatedCells[y][x] === reversed) {
        score -= weight[y][x];
      }
    }
  }
  return score;
}

function minMax(cells, token, depth) {
  if (depth === 0) {
    return {
      action: undefined,
      score: evalScore(cells, token)
    };
  }

  var reversed = _ReversiEvalMachine2.default.reversedToken(token);
  var bestAction = {
    action: undefined,
    score: Number.NEGATIVE_INFINITY
  };
  for (var y = 0; y < cells.length; y++) {
    for (var x = 0; x < cells[y].length; x++) {
      if (!_ReversiEvalMachine2.default.canPutInto(cells, x, y, token)) {
        continue;
      }

      var nextCells = _ReversiEvalMachine2.default.getNextCellsAfterPuttingInto(cells, x, y, token);
      var score = -minMax(nextCells, reversed, depth - 1).score;
      if (score > bestAction.score) {
        var action = { x: x, y: y };
        bestAction = { action: action, score: score };
      }
    }
  }

  // パスの場合は評価値として現在の盤面のスコアを返す
  if (bestAction.action === undefined) {
    return {
      action: undefined,
      score: evalScore(cells, token)
    };
  }

  return bestAction;
}

},{"./ReversiEvalMachine":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
